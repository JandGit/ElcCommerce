package com.android.tkengine.elccommerce.utils;import android.content.Context;import android.os.Handler;import android.os.Message;import android.support.v4.view.ViewPager;import android.widget.ImageView;import android.widget.LinearLayout;import com.android.tkengine.elccommerce.R;import java.sql.Time;import java.util.Timer;import java.util.TimerTask;/** * Created by FangYu on 2016/8/11. */public class Indicator {    final static int[] currentIndex = {0};    static boolean isFirst = true;    public static void setUpViewPager(final ViewPager vp, LinearLayout indicator, Context context, final int length ,int type) {        final ImageView[] mCircleImages = new ImageView[length];        final Handler mHandler = new Handler() {            @Override            public void handleMessage(Message msg) {                switch (msg.what){                    case 1:                        if(msg.arg1 != 0){                        vp.setCurrentItem(msg.arg1);                    }else {                        vp.setCurrentItem(msg.arg1, false);                    }                    break;                }            }        };        if(isFirst == true){            for(int i = 0; i<mCircleImages.length; i++){                ImageView imageView = new ImageView(context);                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(50,50);                params.setMargins(5, 0, 5, 0);                imageView.setLayoutParams(params);                if(i == 0){                    imageView.setBackgroundResource(R.mipmap.indicator_selector);                }else                    imageView.setBackgroundResource(R.mipmap.indicator_no);                mCircleImages[i] = imageView;                indicator.addView(mCircleImages[i]);            }            isFirst = false;        }        vp.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            @Override            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {            }            @Override            public void onPageSelected(int position) {                int total = mCircleImages.length;                for (int j = 0; j<total; j++){                    if (j == position){                        mCircleImages[j].setBackgroundResource(R.mipmap.indicator_selector);                    }else                        mCircleImages[j].setBackgroundResource(R.mipmap.indicator_no);                }                currentIndex[0] = position;            }            @Override            public void onPageScrollStateChanged(int state) {                int i;                switch (state){                    //手势滑动                    case ViewPager.SCROLL_STATE_DRAGGING:                        if(vp.getCurrentItem() == vp.getAdapter().getCount() - 1){                            vp.setCurrentItem(0, false);                        }                        break;                    //界面切换中                    case ViewPager.SCROLL_STATE_SETTLING:                        break;                    //滑动结束                    case ViewPager.SCROLL_STATE_IDLE:// else if (vp.getCurrentItem() == 0){//                            vp.setCurrentItem(vp.getAdapter().getCount() - 1, false);//                        }                        break;                    default:                        break;                }            }        });        switch (type){            case 1:            Timer timer = new Timer();            timer.schedule(new TimerTask() {                @Override                public void run() {                    Message message = new Message();                    message.what = 1;                    if(currentIndex[0] == length - 1){                        currentIndex[0] = -2;                    }                    message.arg1 = currentIndex[0] + 1;                    mHandler.sendMessage(message);                }            },5000,5000);                break;            default:                break;        }    }    public static void onFinish(){        isFirst = true;    }}