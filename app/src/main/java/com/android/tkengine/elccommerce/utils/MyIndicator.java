package com.android.tkengine.elccommerce.utils;import android.content.Context;import android.os.Handler;import android.os.Message;import android.support.v4.view.ViewPager;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.widget.ImageView;import android.widget.LinearLayout;import com.android.tkengine.elccommerce.R;import java.util.Timer;import java.util.TimerTask;public class MyIndicator {    static class MyHandler extends Handler {        ViewPager vp;        public MyHandler(ViewPager vp) {            this.vp = vp;        }        @Override        public void handleMessage(Message msg) {            switch (msg.what) {                case 1:                    if (msg.arg1 != 0) {                        vp.setCurrentItem(msg.arg1, true);                    } else {                        vp.setCurrentItem(msg.arg1, true);                    }                    break;            }        }    }    private MyHandler mHandler;    final int[] currentIndex = {0};    public void setUpViewPager(final ViewPager vp, LinearLayout indicator, Context context, final int length, final int type) {        final ImageView[] mCircleImages = new ImageView[length];        mHandler = new MyHandler(vp);        if (0 == indicator.getChildCount()) {            for (int i = 0; i < mCircleImages.length; i++) {                ImageView imageView = new ImageView(context);                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(50, 50);                params.setMargins(5, 0, 5, 0);                imageView.setLayoutParams(params);                if (i == 0) {                    imageView.setBackgroundResource(R.mipmap.indicator_selector);                } else                    imageView.setBackgroundResource(R.mipmap.indicator_no);                mCircleImages[i] = imageView;                indicator.addView(mCircleImages[i]);            }            vp.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {                ImageView[] imgs = mCircleImages;                @Override                public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {                }                @Override                public void onPageSelected(int position) {                    int total = imgs.length;                    for (int j = 0; j < total; j++) {                        if (j == position) {                            imgs[j].setBackgroundResource(R.mipmap.indicator_selector);                        } else                            imgs[j].setBackgroundResource(R.mipmap.indicator_no);                    }                    currentIndex[0] = position;                }                @Override                public void onPageScrollStateChanged(int state) {                    int i = 0;                    switch (state) {                        //手势滑动                        case ViewPager.SCROLL_STATE_DRAGGING:                            if (vp.getCurrentItem() == vp.getAdapter().getCount() - 1) {                                i = vp.getCurrentItem();                            }                            break;                        //界面切换中                        case ViewPager.SCROLL_STATE_SETTLING:                            break;                        //滑动结束                        case ViewPager.SCROLL_STATE_IDLE:                            break;                        default:                            break;                    }                }            });            switch (type) {                case 1:                    Timer timer = new Timer();                    timer.schedule(new TimerTask() {                        @Override                        public void run() {                            Message message = new Message();                            message.what = 1;                            if (currentIndex[0] == length - 1) {                                currentIndex[0] = -2;                            }                            message.arg1 = currentIndex[0] + 1;                            mHandler.sendMessage(message);                        }                    }, 5000, 5000);                    break;                default:                    break;            }        }    }}